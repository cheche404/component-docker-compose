version: '2'
services:
  mysql8.0:
    image: mysql:8.0.27
    container_name: mysql8.0
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      # root 密码
      MYSQL_ROOT_PASSWORD: dongyang106
      # 初始化数据库(后续的初始化sql会在这个库执行)
      MYSQL_DATABASE: cheche
      # 初始化用户(不能是root 会报错, 后续需要给新用户赋予权限)
      MYSQL_USER: cheche
      # 用户密码
      MYSQL_PASSWORD: dongyang106
      # 映射端口
    ports:
      - "3306:3306"
    volumes:
      # 数据挂载
      - D:/docker-compose/mysql/data/:/var/lib/mysql/
      # 配置挂载
      - D:/docker-compose/mysql/conf/:/etc/mysql/conf.d/
      # 初始化目录挂载
      - D:/docker-compose/mysql/init/:/docker-entrypoint-initdb.d/
    command:
      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1

  nacos-server:
    image: nacos/nacos-server
    container_name: nacos-server
#    restart: always
    volumes:
      # 日志挂载
      - D:/docker-compose/nacos/logs:/home/nacos/logs
      # 配置文件挂载
      - D:/docker-compose/nacos/application.properties:/home/nacos/conf/application.properties
    ports:
      - "8848:8848"
      - "9848:9848"
    environment:
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
      - SPRING_DATASOURCE_PLATFORM=mysql
      # 内存配置
      - JVM_XMS=512m
      - JVM_MMS=320m

  nginx:
    image: nginx
    container_name: nginx
    ports:
      - "9000:9000"
    volumes:
      - D:/docker-compose/nginx/nginx.conf:/etc/nginx/nginx.conf
      - D:/docker-compose/nginx/iot-alarm-monitor.conf:/etc/nginx/conf.d/iot-alarm-monitor.conf
    environment:
      - TZ=Asia/Shanghai

  kafkaui-lite:
    image: freakchicken/kafka-ui-lite
    container_name: kafkaui-lite
    ports:
      - "8889:8889"
    environment:
      - TZ=Asia/Shanghai

  redis:
    image: redis:7.0.8
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - "./data/redis:/data"
    command: redis-server --appendonly yes --requirepass "dongyang106"
    environment:
      - TZ=Asia/Shanghai

  zookeeper:
    image: wurstmeister/zookeeper                    # 原镜像`wurstmeister/zookeeper`
    container_name: zookeeper                        # 容器名为'zookeeper'
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "/etc/localtime:/etc/localtime"
    ports: # 映射端口
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"

#  kafka:
#    image: wurstmeister/kafka                                # 原镜像`wurstmeister/kafka`
#    container_name: kafka                                    # 容器名为'kafka'
#    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
#      - "/etc/localtime:/etc/localtime"
#    environment: # 设置环境变量,相当于docker run命令中的-e
#      KAFKA_BROKER_ID: 0                                               # 在kafka集群中，每个kafka都有一个BROKER_ID来区分自己
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.81.86.129:9092 # TODO 将kafka的地址端口注册给zookeeper
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092                        # 配置kafka的监听端口
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181                # zookeeper地址
#      KAFKA_CREATE_TOPICS: "cheche"
#    ports: # 映射端口
#      - "9092:9092"
#    depends_on: # 解决容器依赖启动先后问题
#      - zookeeper

  elasticsearch:
    image: elasticsearch:7.17.4
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: "-Djava.net.preferIPv4Stack=true -Xms2g -Xmx2g"
      TZ: Asia/Shanghai
      transport.host: 0.0.0.0
      discovery.type: single-node
      bootstrap.memory_lock: "true"
      discovery.zen.minimum_master_nodes: 1
      discovery.zen.ping.unicast.hosts: elasticsearch
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
    image: kibana:7.17.4
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    links:
      - elasticsearch:elasticsearch
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  postgres:
    image: postgres:11-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - "./data/postgres:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: dongyang106
      POSTGRES_DB: cheche
      TZ: Asia/Shanghai

  elasticview:
    image: kecikeci/elastic_view:latest
    container_name: elasticView
    volumes:
      - /data/elastic_view/data:/data
      - /data/elastic_view/logs:/logs
      - D:/docker-compose/elasticview:/config
    links:
      - elasticsearch:elasticsearch
    ports:
      - "8090:8090"
    depends_on:
      - elasticsearch

  emqx:
    image: emqx/emqx:latest
    container_name: emqx
    ports:
      - "18083:18083"
      - "1883:1883"
      - "8083:8083"
      - "8084:8084"